- [x] main UI elements:
    - [x] a panel for user inputs and displaying feedback
    - [x] a panel for displaying a map


- [ ] user input / feedback panel work:
    - [x] let user add another moose to the sighting
        - [x] a button to do this
        - [x] style button
            - [x] button should be bc gov yellow
            - [x] button should be on the right side of the header
            - [x] text bc gov blue-ish
        - [x] a place in state to keep working moose sighting data
        - [x] needs to handle a list in state
        - [x] reducer case for add moose action

    - [x] let user select estimated age of each moose
        - [x] age selector UI element
        - [x] dispatch update moose payload { id, age, other stuff}
        - [x] update moose reducer case, where we only update the moose whos id we had in the payload

    # Luna
    - [x] style mark location button
    - [x] add gender to things we record for each moose


    - [x] prompt for loctation
        - [ ] let user enter or 
        - [x] grab from geolocation



    # Gabe
    - [ ] confirm/submit - dispatch action
        - [ ] modal / ui prompt and dispatch on confirm
        - [ ] data in state for current siting is 'packaged' up into a 'sighting' object
        - [ ] sighting objects are in a list in state

        - [ ] on update write to localstorage
        - [ ] on load read from state


    - [ ] geojson component for past sightings & a toggle

# Julian
- [ ] map element work:
    - [ ] a child element to the map called CurrentMooseLocation
    - [ ] will return a <Marker/> (from react-leaflet)
    - [ ] uses location state 

    - [ ] display results on a map


- [ ] maybe look at using react router