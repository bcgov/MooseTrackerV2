Feb.22/24

- [x] Zoom control css should be fixed - Norris
- [x] About page needs fixing
  - [x] Fish from BCGov's moose tracker repos, there should be two of them
- [x] Add "make a sighting" button or something like that for new sightings page -Luna
- [ ] Add an indicator to show which route we're on
- [ ] Add a tutorial icon/help box
- [ ] add a button for regulations pdf page - Gabe
- [ ] Include pdf as an asset so it doesn't have to do a webfetch for it
  - [ ] Find the hunting regulations for this year and proof out viewing that pdf in android and ios for version 1
  - [ ] For version 2 include a table of contents and physically split the pdf by regulations
- [ ] Fix the react problems within console
- [ ] get docker working
- [ ] Moose pins should be different colors
  - [ ] synced
  - [ ] not synced
  - [ ] Current sighting
- [ ] All sightings page should look like the make a sighting page - Norris
- [ ] Sightings page could use some more styling - Norris


today;


- [ ] Validation on save button task:
    - [ ] Modify some actions and side effects:
        - [ ] User save sighting - displatched on click, but doens't hit reducer   
            - [ ] does Validation
            - [ ] throws User save sighting failure if doesn't pass Validation
            - [ ] puts User save sighting success with updated state if pass, that action hits reducer
        - [ ] Write to disk - this gets fired on User save sighting success
        - [ ] For the user save sighting failure - hits reducer, writes to a current error property
        - [x] New snackbar component that listens to error property and pops up
        - [x] new component add a map layer show moose (alt colour) in state (sightings) on map
        - [ ] onclick or onhover date?


today todo:

- [x] MW: Save button & handler code all working and page that lists sightings working as expected
- [ ] J: API integration:
        - [ ] Update OpenAPI Spec for endpoint to accept a list of sightings from a client
        - [ ] Make a side effect function client side to call API with matching interface data and get a 200
        - [ ] Update API http handler to do the database stuff we need (and any db subtasks)
        - [ ] All happens on button click, user sees if it worked or not

        Misc UX improvements:
- [ ] Need a home button
- [ ] Footer on sightings page needs to be stuck on bottom
- [ ] snackbars for successful save / api events
    - [ ] state array with notifications
    - [ ] action to dispatch to add to array
    - [ ] snackbar component to alert user of events (like 'saved', 'synched' 'error trying to submit something')
    - [ ] action to remove notification from array (user hits clear, or on first render its gonna be dispatched with a timeout or something)

React leaflet stuff:
- [ ] User can see all sightings on map, not just the current one
    - [ ] component to show all sightings
    - [ ] they are different colour depending on sync, current sighting, etc
    - [ ] Bonus goal - layer toggles

- [ ] User can clear their map or delete individual sightings (that haven't been synced)
    - [x] N: User can clear current sighting
    - [ ] On sightings page, user can delete an indivdual sighting (not synced) which will also fire write to disk action

- [ ] 

0.30:

    - [ ] App making API call to submit sightings
        - [ ] UI To tell user they are making a sighting:
            - [x] Title or something to indicate # L
        - [x] Button to persist to disk (save) # J
            - [x] A redux saga action handler - action dispatched and side effect handler writes to disk
        - [ ] UI to list all sightings and if submitted or not # G
            - [ ] Another page to list all previous sightings, summarize them in one line and list them # 
            - [ ] Shows status (synced or not)
        - [x] refactor moose sighting save # L
          Current state:
            - in the component we load local storage into a variable
            - add items to array (local variable)
            - rewrite to localstorage
          on click of save button:
            - [ ] dispatch action to update moosesightingsarray in state
            - [ ] side effect to persist them
            - [ ] listen in saga   
            - [ ] run handler function to update local storage

        # Getting in to API stuff
        - [ ] UI to submit all sightings
            - [ ] Have a button to sync them if online
            - [ ] App indicating it worked or not
            
        - [ ] Sightings landing in a table

0.20:

  - [x] remove blanabba - l
  - [x] replace age with enum of 'adult' 'calf' - g
  - [x] add a moose tracker / bcgov header + footer - j
  - [x] find or edit the icon so we have a female + calf icon - j
    - [ ] add attribution for the existing icons
    - [x] edit or find the other two - l
  - [x] add multiple icons when there are multiple moose - j
  - [ ] pages in app with react router: - m + g
    - [ ] about page
    - [x] record sighting
    - [ ] view & sync past sightings
        - [ ] wire up a side effect to call the api from the app
       - [ ] api make the endpoint update the db if it doesnt already
    - [x] page to view the regs (pdf) - g

0.1.0: 
- [x] main UI elements:
    - [x] a panel for user inputs and displaying feedback
    - [x] a panel for displaying a map


- [ ] user input / feedback panel work:
    - [x] let user add another moose to the sighting
        - [x] a button to do this
        - [x] style button
            - [x] button should be bc gov yellow
            - [x] button should be on the right side of the header
            - [x] text bc gov blue-ish
        - [x] a place in state to keep working moose sighting data
        - [x] needs to handle a list in state
        - [x] reducer case for add moose action

    - [x] let user select estimated age of each moose
        - [x] age selector UI element
        - [x] dispatch update moose payload { id, age, other stuff}
        - [x] update moose reducer case, where we only update the moose whos id we had in the payload

    # Luna
    - [x] style mark location button
    - [x] add gender to things we record for each moose


    - [x] prompt for lactation
        - [ ] let user enter or 
        - [x] grab from geolocation



    # Gabe
    - [ ] confirm/submit - dispatch action
        - [ ] modal / ui prompt and dispatch on confirm
        - [ ] data in state for current siting is 'packaged' up into a 'sighting' object
        - [ ] sighting objects are in a list in state

        - [ ] on update write to localstorage
        - [ ] on load read from state


    - [ ] geojson component for past sightings & a toggle

# Julian
- [x] map element work:
    - [x] a child element to the map called CurrentMooseLocation
    - [x] will return a <Marker/> (from react-leaflet)
    - [x] uses location state 

    - [x] display results on a map


- [ ] maybe look at using react router
