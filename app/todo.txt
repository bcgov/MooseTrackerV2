0.20:

  - [ ] remove blanabba - l
  - [ ] replace age with enum of 'adult' 'calf' - g
  - [ ] add a moose tracker / bcgov header + footer - j
  - [ ] find or edit the icon so we have a female + calf icon - j
    - [ ] add attribution for the existing icons
    - [ ] edit or find the other two
  - [ ] add multiple icons when there are multiple moose - j
  - [ ] wire up a side effect to call the api from the app
  - [ ] pages in app with react router: - m + g
    - [ ] about page
    - [x] record sighting
    - [ ] view & sync past sightings
       - [ ] api make the endpoint update the db if it doesnt already
    - [ ] page to view the regs (pdf) - g

0.1.0: 
- [x] main UI elements:
    - [x] a panel for user inputs and displaying feedback
    - [x] a panel for displaying a map


- [ ] user input / feedback panel work:
    - [x] let user add another moose to the sighting
        - [x] a button to do this
        - [x] style button
            - [x] button should be bc gov yellow
            - [x] button should be on the right side of the header
            - [x] text bc gov blue-ish
        - [x] a place in state to keep working moose sighting data
        - [x] needs to handle a list in state
        - [x] reducer case for add moose action

    - [x] let user select estimated age of each moose
        - [x] age selector UI element
        - [x] dispatch update moose payload { id, age, other stuff}
        - [x] update moose reducer case, where we only update the moose whos id we had in the payload

    # Luna
    - [x] style mark location button
    - [x] add gender to things we record for each moose


    - [x] prompt for loctation
        - [ ] let user enter or 
        - [x] grab from geolocation



    # Gabe
    - [ ] confirm/submit - dispatch action
        - [ ] modal / ui prompt and dispatch on confirm
        - [ ] data in state for current siting is 'packaged' up into a 'sighting' object
        - [ ] sighting objects are in a list in state

        - [ ] on update write to localstorage
        - [ ] on load read from state


    - [ ] geojson component for past sightings & a toggle

# Julian
- [x] map element work:
    - [x] a child element to the map called CurrentMooseLocation
    - [x] will return a <Marker/> (from react-leaflet)
    - [x] uses location state 

    - [x] display results on a map


- [ ] maybe look at using react router
